{"version":3,"file":"chunk-0bbe6f22.js","sources":["../../node_modules/lit-html/lib/directive.js","../../node_modules/lit-html/lib/dom.js","../../node_modules/lit-html/lib/part.js","../../node_modules/lit-html/lib/template.js","../../node_modules/lit-html/lib/template-instance.js","../../node_modules/lit-html/lib/template-result.js","../../node_modules/lit-html/lib/parts.js","../../node_modules/lit-html/lib/default-template-processor.js","../../node_modules/lit-html/lib/template-factory.js","../../node_modules/lit-html/lib/render.js","../../node_modules/lit-html/lit-html.js","../../node_modules/lit-html/lib/modify-template.js","../../node_modules/lit-html/lib/shady-render.js","../../node_modules/lit-element/lib/updating-element.js","../../node_modules/lit-element/lib/css-tag.js","../../node_modules/lit-element/lit-element.js","../../src/components/page-view-element.js","../../src/components/ts-style-shared.js"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nconst directives = new WeakMap();\n/**\n * Brands a function as a directive so that lit-html will call the function\n * during template rendering, rather than passing as a value.\n *\n * @param f The directive factory function. Must be a function that returns a\n * function of the signature `(part: Part) => void`. The returned function will\n * be called with the part object\n *\n * @example\n *\n * ```\n * import {directive, html} from 'lit-html';\n *\n * const immutable = directive((v) => (part) => {\n *   if (part.value !== v) {\n *     part.setValue(v)\n *   }\n * });\n * ```\n */\n// tslint:disable-next-line:no-any\nexport const directive = (f) => ((...args) => {\n    const d = f(...args);\n    directives.set(d, true);\n    return d;\n});\nexport const isDirective = (o) => {\n    return typeof o === 'function' && directives.has(o);\n};\n//# sourceMappingURL=directive.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * True if the custom elements polyfill is in use.\n */\nexport const isCEPolyfill = window.customElements !== undefined &&\n    window.customElements.polyfillWrapFlushCallback !==\n        undefined;\n/**\n * Reparents nodes, starting from `startNode` (inclusive) to `endNode`\n * (exclusive), into another container (could be the same container), before\n * `beforeNode`. If `beforeNode` is null, it appends the nodes to the\n * container.\n */\nexport const reparentNodes = (container, start, end = null, before = null) => {\n    let node = start;\n    while (node !== end) {\n        const n = node.nextSibling;\n        container.insertBefore(node, before);\n        node = n;\n    }\n};\n/**\n * Removes nodes, starting from `startNode` (inclusive) to `endNode`\n * (exclusive), from `container`.\n */\nexport const removeNodes = (container, startNode, endNode = null) => {\n    let node = startNode;\n    while (node !== endNode) {\n        const n = node.nextSibling;\n        container.removeChild(node);\n        node = n;\n    }\n};\n//# sourceMappingURL=dom.js.map","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = {};\n/**\n * A sentinel value that signals a NodePart to fully clear its content.\n */\nexport const nothing = {};\n//# sourceMappingURL=part.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n/**\n * An expression marker used text-positions, multi-binding attributes, and\n * attributes with markup-like text values.\n */\nexport const nodeMarker = `<!--${marker}-->`;\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n/**\n * Suffix appended to all bound attribute names.\n */\nexport const boundAttributeSuffix = '$lit$';\n/**\n * An updateable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n    constructor(result, element) {\n        this.parts = [];\n        this.element = element;\n        let index = -1;\n        let partIndex = 0;\n        const nodesToRemove = [];\n        const _prepareTemplate = (template) => {\n            const content = template.content;\n            // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be\n            // null\n            const walker = document.createTreeWalker(content, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n            // Keeps track of the last index associated with a part. We try to delete\n            // unnecessary nodes, but we never want to associate two different parts\n            // to the same index. They must have a constant node between.\n            let lastPartIndex = 0;\n            while (walker.nextNode()) {\n                index++;\n                const node = walker.currentNode;\n                if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n                    if (node.hasAttributes()) {\n                        const attributes = node.attributes;\n                        // Per\n                        // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n                        // attributes are not guaranteed to be returned in document order.\n                        // In particular, Edge/IE can return them out of order, so we cannot\n                        // assume a correspondance between part index and attribute index.\n                        let count = 0;\n                        for (let i = 0; i < attributes.length; i++) {\n                            if (attributes[i].value.indexOf(marker) >= 0) {\n                                count++;\n                            }\n                        }\n                        while (count-- > 0) {\n                            // Get the template literal section leading up to the first\n                            // expression in this attribute\n                            const stringForPart = result.strings[partIndex];\n                            // Find the attribute name\n                            const name = lastAttributeNameRegex.exec(stringForPart)[2];\n                            // Find the corresponding attribute\n                            // All bound attributes have had a suffix added in\n                            // TemplateResult#getHTML to opt out of special attribute\n                            // handling. To look up the attribute value we also need to add\n                            // the suffix.\n                            const attributeLookupName = name.toLowerCase() + boundAttributeSuffix;\n                            const attributeValue = node.getAttribute(attributeLookupName);\n                            const strings = attributeValue.split(markerRegex);\n                            this.parts.push({ type: 'attribute', index, name, strings });\n                            node.removeAttribute(attributeLookupName);\n                            partIndex += strings.length - 1;\n                        }\n                    }\n                    if (node.tagName === 'TEMPLATE') {\n                        _prepareTemplate(node);\n                    }\n                }\n                else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n                    const data = node.data;\n                    if (data.indexOf(marker) >= 0) {\n                        const parent = node.parentNode;\n                        const strings = data.split(markerRegex);\n                        const lastIndex = strings.length - 1;\n                        // Generate a new text node for each literal section\n                        // These nodes are also used as the markers for node parts\n                        for (let i = 0; i < lastIndex; i++) {\n                            parent.insertBefore((strings[i] === '') ? createMarker() :\n                                document.createTextNode(strings[i]), node);\n                            this.parts.push({ type: 'node', index: ++index });\n                        }\n                        // If there's no text, we must insert a comment to mark our place.\n                        // Else, we can trust it will stick around after cloning.\n                        if (strings[lastIndex] === '') {\n                            parent.insertBefore(createMarker(), node);\n                            nodesToRemove.push(node);\n                        }\n                        else {\n                            node.data = strings[lastIndex];\n                        }\n                        // We have a part for each match found\n                        partIndex += lastIndex;\n                    }\n                }\n                else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n                    if (node.data === marker) {\n                        const parent = node.parentNode;\n                        // Add a new marker node to be the startNode of the Part if any of\n                        // the following are true:\n                        //  * We don't have a previousSibling\n                        //  * The previousSibling is already the start of a previous part\n                        if (node.previousSibling === null || index === lastPartIndex) {\n                            index++;\n                            parent.insertBefore(createMarker(), node);\n                        }\n                        lastPartIndex = index;\n                        this.parts.push({ type: 'node', index });\n                        // If we don't have a nextSibling, keep this node so we have an end.\n                        // Else, we can remove it to save future costs.\n                        if (node.nextSibling === null) {\n                            node.data = '';\n                        }\n                        else {\n                            nodesToRemove.push(node);\n                            index--;\n                        }\n                        partIndex++;\n                    }\n                    else {\n                        let i = -1;\n                        while ((i = node.data.indexOf(marker, i + 1)) !==\n                            -1) {\n                            // Comment node has a binding marker inside, make an inactive part\n                            // The binding won't work, but subsequent bindings will\n                            // TODO (justinfagnani): consider whether it's even worth it to\n                            // make bindings in comments work\n                            this.parts.push({ type: 'node', index: -1 });\n                        }\n                    }\n                }\n            }\n        };\n        _prepareTemplate(element);\n        // Remove text binding nodes after the walk to not disturb the TreeWalker\n        for (const n of nodesToRemove) {\n            n.parentNode.removeChild(n);\n        }\n    }\n}\nexport const isTemplatePartActive = (part) => part.index !== -1;\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => document.createComment('');\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#attributes-0\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-character\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex = /([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \\x09\\x0a\\x0c\\x0d\"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n//# sourceMappingURL=template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isCEPolyfill } from './dom.js';\nimport { isTemplatePartActive } from './template.js';\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n    constructor(template, processor, options) {\n        this._parts = [];\n        this.template = template;\n        this.processor = processor;\n        this.options = options;\n    }\n    update(values) {\n        let i = 0;\n        for (const part of this._parts) {\n            if (part !== undefined) {\n                part.setValue(values[i]);\n            }\n            i++;\n        }\n        for (const part of this._parts) {\n            if (part !== undefined) {\n                part.commit();\n            }\n        }\n    }\n    _clone() {\n        // When using the Custom Elements polyfill, clone the node, rather than\n        // importing it, to keep the fragment in the template's document. This\n        // leaves the fragment inert so custom elements won't upgrade and\n        // potentially modify their contents by creating a polyfilled ShadowRoot\n        // while we traverse the tree.\n        const fragment = isCEPolyfill ?\n            this.template.element.content.cloneNode(true) :\n            document.importNode(this.template.element.content, true);\n        const parts = this.template.parts;\n        let partIndex = 0;\n        let nodeIndex = 0;\n        const _prepareInstance = (fragment) => {\n            // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be\n            // null\n            const walker = document.createTreeWalker(fragment, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n            let node = walker.nextNode();\n            // Loop through all the nodes and parts of a template\n            while (partIndex < parts.length && node !== null) {\n                const part = parts[partIndex];\n                // Consecutive Parts may have the same node index, in the case of\n                // multiple bound attributes on an element. So each iteration we either\n                // increment the nodeIndex, if we aren't on a node with a part, or the\n                // partIndex if we are. By not incrementing the nodeIndex when we find a\n                // part, we allow for the next part to be associated with the current\n                // node if neccessasry.\n                if (!isTemplatePartActive(part)) {\n                    this._parts.push(undefined);\n                    partIndex++;\n                }\n                else if (nodeIndex === part.index) {\n                    if (part.type === 'node') {\n                        const part = this.processor.handleTextExpression(this.options);\n                        part.insertAfterNode(node.previousSibling);\n                        this._parts.push(part);\n                    }\n                    else {\n                        this._parts.push(...this.processor.handleAttributeExpressions(node, part.name, part.strings, this.options));\n                    }\n                    partIndex++;\n                }\n                else {\n                    nodeIndex++;\n                    if (node.nodeName === 'TEMPLATE') {\n                        _prepareInstance(node.content);\n                    }\n                    node = walker.nextNode();\n                }\n            }\n        };\n        _prepareInstance(fragment);\n        if (isCEPolyfill) {\n            document.adoptNode(fragment);\n            customElements.upgrade(fragment);\n        }\n        return fragment;\n    }\n}\n//# sourceMappingURL=template-instance.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { reparentNodes } from './dom.js';\nimport { boundAttributeSuffix, lastAttributeNameRegex, marker, nodeMarker } from './template.js';\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n    constructor(strings, values, type, processor) {\n        this.strings = strings;\n        this.values = values;\n        this.type = type;\n        this.processor = processor;\n    }\n    /**\n     * Returns a string of HTML used to create a `<template>` element.\n     */\n    getHTML() {\n        const endIndex = this.strings.length - 1;\n        let html = '';\n        for (let i = 0; i < endIndex; i++) {\n            const s = this.strings[i];\n            // This exec() call does two things:\n            // 1) Appends a suffix to the bound attribute name to opt out of special\n            // attribute value parsing that IE11 and Edge do, like for style and\n            // many SVG attributes. The Template class also appends the same suffix\n            // when looking up attributes to create Parts.\n            // 2) Adds an unquoted-attribute-safe marker for the first expression in\n            // an attribute. Subsequent attribute expressions will use node markers,\n            // and this is safe since attributes with multiple expressions are\n            // guaranteed to be quoted.\n            const match = lastAttributeNameRegex.exec(s);\n            if (match) {\n                // We're starting a new bound attribute.\n                // Add the safe attribute suffix, and use unquoted-attribute-safe\n                // marker.\n                html += s.substr(0, match.index) + match[1] + match[2] +\n                    boundAttributeSuffix + match[3] + marker;\n            }\n            else {\n                // We're either in a bound node, or trailing bound attribute.\n                // Either way, nodeMarker is safe to use.\n                html += s + nodeMarker;\n            }\n        }\n        return html + this.strings[endIndex];\n    }\n    getTemplateElement() {\n        const template = document.createElement('template');\n        template.innerHTML = this.getHTML();\n        return template;\n    }\n}\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTMl in an `<svg>` tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the `<svg>` tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n    getHTML() {\n        return `<svg>${super.getHTML()}</svg>`;\n    }\n    getTemplateElement() {\n        const template = super.getTemplateElement();\n        const content = template.content;\n        const svgElement = content.firstChild;\n        content.removeChild(svgElement);\n        reparentNodes(content, svgElement.firstChild);\n        return template;\n    }\n}\n//# sourceMappingURL=template-result.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isDirective } from './directive.js';\nimport { removeNodes } from './dom.js';\nimport { noChange, nothing } from './part.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { TemplateResult } from './template-result.js';\nimport { createMarker } from './template.js';\nexport const isPrimitive = (value) => {\n    return (value === null ||\n        !(typeof value === 'object' || typeof value === 'function'));\n};\n/**\n * Sets attribute values for AttributeParts, so that the value is only set once\n * even if there are multiple parts for an attribute.\n */\nexport class AttributeCommitter {\n    constructor(element, name, strings) {\n        this.dirty = true;\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n        this.parts = [];\n        for (let i = 0; i < strings.length - 1; i++) {\n            this.parts[i] = this._createPart();\n        }\n    }\n    /**\n     * Creates a single part. Override this to create a differnt type of part.\n     */\n    _createPart() {\n        return new AttributePart(this);\n    }\n    _getValue() {\n        const strings = this.strings;\n        const l = strings.length - 1;\n        let text = '';\n        for (let i = 0; i < l; i++) {\n            text += strings[i];\n            const part = this.parts[i];\n            if (part !== undefined) {\n                const v = part.value;\n                if (v != null &&\n                    (Array.isArray(v) ||\n                        // tslint:disable-next-line:no-any\n                        typeof v !== 'string' && v[Symbol.iterator])) {\n                    for (const t of v) {\n                        text += typeof t === 'string' ? t : String(t);\n                    }\n                }\n                else {\n                    text += typeof v === 'string' ? v : String(v);\n                }\n            }\n        }\n        text += strings[l];\n        return text;\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            this.element.setAttribute(this.name, this._getValue());\n        }\n    }\n}\nexport class AttributePart {\n    constructor(comitter) {\n        this.value = undefined;\n        this.committer = comitter;\n    }\n    setValue(value) {\n        if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {\n            this.value = value;\n            // If the value is a not a directive, dirty the committer so that it'll\n            // call setAttribute. If the value is a directive, it'll dirty the\n            // committer if it calls setValue().\n            if (!isDirective(value)) {\n                this.committer.dirty = true;\n            }\n        }\n    }\n    commit() {\n        while (isDirective(this.value)) {\n            const directive = this.value;\n            this.value = noChange;\n            directive(this);\n        }\n        if (this.value === noChange) {\n            return;\n        }\n        this.committer.commit();\n    }\n}\nexport class NodePart {\n    constructor(options) {\n        this.value = undefined;\n        this._pendingValue = undefined;\n        this.options = options;\n    }\n    /**\n     * Inserts this part into a container.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendInto(container) {\n        this.startNode = container.appendChild(createMarker());\n        this.endNode = container.appendChild(createMarker());\n    }\n    /**\n     * Inserts this part between `ref` and `ref`'s next sibling. Both `ref` and\n     * its next sibling must be static, unchanging nodes such as those that appear\n     * in a literal section of a template.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterNode(ref) {\n        this.startNode = ref;\n        this.endNode = ref.nextSibling;\n    }\n    /**\n     * Appends this part into a parent part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendIntoPart(part) {\n        part._insert(this.startNode = createMarker());\n        part._insert(this.endNode = createMarker());\n    }\n    /**\n     * Appends this part after `ref`\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterPart(ref) {\n        ref._insert(this.startNode = createMarker());\n        this.endNode = ref.endNode;\n        ref.endNode = this.startNode;\n    }\n    setValue(value) {\n        this._pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this._pendingValue)) {\n            const directive = this._pendingValue;\n            this._pendingValue = noChange;\n            directive(this);\n        }\n        const value = this._pendingValue;\n        if (value === noChange) {\n            return;\n        }\n        if (isPrimitive(value)) {\n            if (value !== this.value) {\n                this._commitText(value);\n            }\n        }\n        else if (value instanceof TemplateResult) {\n            this._commitTemplateResult(value);\n        }\n        else if (value instanceof Node) {\n            this._commitNode(value);\n        }\n        else if (Array.isArray(value) ||\n            // tslint:disable-next-line:no-any\n            value[Symbol.iterator]) {\n            this._commitIterable(value);\n        }\n        else if (value === nothing) {\n            this.value = nothing;\n            this.clear();\n        }\n        else {\n            // Fallback, will render the string representation\n            this._commitText(value);\n        }\n    }\n    _insert(node) {\n        this.endNode.parentNode.insertBefore(node, this.endNode);\n    }\n    _commitNode(value) {\n        if (this.value === value) {\n            return;\n        }\n        this.clear();\n        this._insert(value);\n        this.value = value;\n    }\n    _commitText(value) {\n        const node = this.startNode.nextSibling;\n        value = value == null ? '' : value;\n        if (node === this.endNode.previousSibling &&\n            node.nodeType === 3 /* Node.TEXT_NODE */) {\n            // If we only have a single text node between the markers, we can just\n            // set its value, rather than replacing it.\n            // TODO(justinfagnani): Can we just check if this.value is primitive?\n            node.data = value;\n        }\n        else {\n            this._commitNode(document.createTextNode(typeof value === 'string' ? value : String(value)));\n        }\n        this.value = value;\n    }\n    _commitTemplateResult(value) {\n        const template = this.options.templateFactory(value);\n        if (this.value instanceof TemplateInstance &&\n            this.value.template === template) {\n            this.value.update(value.values);\n        }\n        else {\n            // Make sure we propagate the template processor from the TemplateResult\n            // so that we use its syntax extension, etc. The template factory comes\n            // from the render function options so that it can control template\n            // caching and preprocessing.\n            const instance = new TemplateInstance(template, value.processor, this.options);\n            const fragment = instance._clone();\n            instance.update(value.values);\n            this._commitNode(fragment);\n            this.value = instance;\n        }\n    }\n    _commitIterable(value) {\n        // For an Iterable, we create a new InstancePart per item, then set its\n        // value to the item. This is a little bit of overhead for every item in\n        // an Iterable, but it lets us recurse easily and efficiently update Arrays\n        // of TemplateResults that will be commonly returned from expressions like:\n        // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n        // If _value is an array, then the previous render was of an\n        // iterable and _value will contain the NodeParts from the previous\n        // render. If _value is not an array, clear this part and make a new\n        // array for NodeParts.\n        if (!Array.isArray(this.value)) {\n            this.value = [];\n            this.clear();\n        }\n        // Lets us keep track of how many items we stamped so we can clear leftover\n        // items from a previous render\n        const itemParts = this.value;\n        let partIndex = 0;\n        let itemPart;\n        for (const item of value) {\n            // Try to reuse an existing part\n            itemPart = itemParts[partIndex];\n            // If no existing part, create a new one\n            if (itemPart === undefined) {\n                itemPart = new NodePart(this.options);\n                itemParts.push(itemPart);\n                if (partIndex === 0) {\n                    itemPart.appendIntoPart(this);\n                }\n                else {\n                    itemPart.insertAfterPart(itemParts[partIndex - 1]);\n                }\n            }\n            itemPart.setValue(item);\n            itemPart.commit();\n            partIndex++;\n        }\n        if (partIndex < itemParts.length) {\n            // Truncate the parts array so _value reflects the current state\n            itemParts.length = partIndex;\n            this.clear(itemPart && itemPart.endNode);\n        }\n    }\n    clear(startNode = this.startNode) {\n        removeNodes(this.startNode.parentNode, startNode.nextSibling, this.endNode);\n    }\n}\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart {\n    constructor(element, name, strings) {\n        this.value = undefined;\n        this._pendingValue = undefined;\n        if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {\n            throw new Error('Boolean attributes can only contain a single expression');\n        }\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n    }\n    setValue(value) {\n        this._pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this._pendingValue)) {\n            const directive = this._pendingValue;\n            this._pendingValue = noChange;\n            directive(this);\n        }\n        if (this._pendingValue === noChange) {\n            return;\n        }\n        const value = !!this._pendingValue;\n        if (this.value !== value) {\n            if (value) {\n                this.element.setAttribute(this.name, '');\n            }\n            else {\n                this.element.removeAttribute(this.name);\n            }\n        }\n        this.value = value;\n        this._pendingValue = noChange;\n    }\n}\n/**\n * Sets attribute values for PropertyParts, so that the value is only set once\n * even if there are multiple parts for a property.\n *\n * If an expression controls the whole property value, then the value is simply\n * assigned to the property under control. If there are string literals or\n * multiple expressions, then the strings are expressions are interpolated into\n * a string first.\n */\nexport class PropertyCommitter extends AttributeCommitter {\n    constructor(element, name, strings) {\n        super(element, name, strings);\n        this.single =\n            (strings.length === 2 && strings[0] === '' && strings[1] === '');\n    }\n    _createPart() {\n        return new PropertyPart(this);\n    }\n    _getValue() {\n        if (this.single) {\n            return this.parts[0].value;\n        }\n        return super._getValue();\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            // tslint:disable-next-line:no-any\n            this.element[this.name] = this._getValue();\n        }\n    }\n}\nexport class PropertyPart extends AttributePart {\n}\n// Detect event listener options support. If the `capture` property is read\n// from the options object, then options are supported. If not, then the thrid\n// argument to add/removeEventListener is interpreted as the boolean capture\n// value so we should only pass the `capture` property.\nlet eventOptionsSupported = false;\ntry {\n    const options = {\n        get capture() {\n            eventOptionsSupported = true;\n            return false;\n        }\n    };\n    // tslint:disable-next-line:no-any\n    window.addEventListener('test', options, options);\n    // tslint:disable-next-line:no-any\n    window.removeEventListener('test', options, options);\n}\ncatch (_e) {\n}\nexport class EventPart {\n    constructor(element, eventName, eventContext) {\n        this.value = undefined;\n        this._pendingValue = undefined;\n        this.element = element;\n        this.eventName = eventName;\n        this.eventContext = eventContext;\n        this._boundHandleEvent = (e) => this.handleEvent(e);\n    }\n    setValue(value) {\n        this._pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this._pendingValue)) {\n            const directive = this._pendingValue;\n            this._pendingValue = noChange;\n            directive(this);\n        }\n        if (this._pendingValue === noChange) {\n            return;\n        }\n        const newListener = this._pendingValue;\n        const oldListener = this.value;\n        const shouldRemoveListener = newListener == null ||\n            oldListener != null &&\n                (newListener.capture !== oldListener.capture ||\n                    newListener.once !== oldListener.once ||\n                    newListener.passive !== oldListener.passive);\n        const shouldAddListener = newListener != null && (oldListener == null || shouldRemoveListener);\n        if (shouldRemoveListener) {\n            this.element.removeEventListener(this.eventName, this._boundHandleEvent, this._options);\n        }\n        if (shouldAddListener) {\n            this._options = getOptions(newListener);\n            this.element.addEventListener(this.eventName, this._boundHandleEvent, this._options);\n        }\n        this.value = newListener;\n        this._pendingValue = noChange;\n    }\n    handleEvent(event) {\n        if (typeof this.value === 'function') {\n            this.value.call(this.eventContext || this.element, event);\n        }\n        else {\n            this.value.handleEvent(event);\n        }\n    }\n}\n// We copy options because of the inconsistent behavior of browsers when reading\n// the third argument of add/removeEventListener. IE11 doesn't support options\n// at all. Chrome 41 only reads `capture` if the argument is an object.\nconst getOptions = (o) => o &&\n    (eventOptionsSupported ?\n        { capture: o.capture, passive: o.passive, once: o.once } :\n        o.capture);\n//# sourceMappingURL=parts.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter } from './parts.js';\n/**\n * Creates Parts when a template is instantiated.\n */\nexport class DefaultTemplateProcessor {\n    /**\n     * Create parts for an attribute-position binding, given the event, attribute\n     * name, and string literals.\n     *\n     * @param element The element containing the binding\n     * @param name  The attribute name\n     * @param strings The string literals. There are always at least two strings,\n     *   event for fully-controlled bindings with a single expression.\n     */\n    handleAttributeExpressions(element, name, strings, options) {\n        const prefix = name[0];\n        if (prefix === '.') {\n            const comitter = new PropertyCommitter(element, name.slice(1), strings);\n            return comitter.parts;\n        }\n        if (prefix === '@') {\n            return [new EventPart(element, name.slice(1), options.eventContext)];\n        }\n        if (prefix === '?') {\n            return [new BooleanAttributePart(element, name.slice(1), strings)];\n        }\n        const comitter = new AttributeCommitter(element, name, strings);\n        return comitter.parts;\n    }\n    /**\n     * Create parts for a text-position binding.\n     * @param templateFactory\n     */\n    handleTextExpression(options) {\n        return new NodePart(options);\n    }\n}\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();\n//# sourceMappingURL=default-template-processor.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { marker, Template } from './template.js';\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function templateFactory(result) {\n    let templateCache = templateCaches.get(result.type);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(result.type, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    // If the TemplateStringsArray is new, generate a key from the strings\n    // This key is shared between all templates with identical content\n    const key = result.strings.join(marker);\n    // Check if we already have a Template for this key\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        // If we have not seen this key before, create a new Template\n        template = new Template(result, result.getTemplateElement());\n        // Cache the Template for this key\n        templateCache.keyString.set(key, template);\n    }\n    // Cache all future queries for this TemplateStringsArray\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n}\nexport const templateCaches = new Map();\n//# sourceMappingURL=template-factory.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { removeNodes } from './dom.js';\nimport { NodePart } from './parts.js';\nimport { templateFactory } from './template-factory.js';\nexport const parts = new WeakMap();\n/**\n * Renders a template to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result a TemplateResult created by evaluating a template tag like\n *     `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nexport const render = (result, container, options) => {\n    let part = parts.get(container);\n    if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart(Object.assign({ templateFactory }, options)));\n        part.appendInto(container);\n    }\n    part.setValue(result);\n    part.commit();\n};\n//# sourceMappingURL=render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n *\n * Main lit-html module.\n *\n * Main exports:\n *\n * -  [[html]]\n * -  [[svg]]\n * -  [[render]]\n *\n * @module lit-html\n * @preferred\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { defaultTemplateProcessor } from './lib/default-template-processor.js';\nimport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { DefaultTemplateProcessor, defaultTemplateProcessor } from './lib/default-template-processor.js';\nexport { directive, isDirective } from './lib/directive.js';\n// TODO(justinfagnani): remove line when we get NodePart moving methods\nexport { removeNodes, reparentNodes } from './lib/dom.js';\nexport { noChange, nothing } from './lib/part.js';\nexport { AttributeCommitter, AttributePart, BooleanAttributePart, EventPart, isPrimitive, NodePart, PropertyCommitter, PropertyPart } from './lib/parts.js';\nexport { parts, render } from './lib/render.js';\nexport { templateCaches, templateFactory } from './lib/template-factory.js';\nexport { TemplateInstance } from './lib/template-instance.js';\nexport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { createMarker, isTemplatePartActive, Template } from './lib/template.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litHtmlVersions'] || (window['litHtmlVersions'] = [])).push('1.0.0');\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings, ...values) => new TemplateResult(strings, values, 'html', defaultTemplateProcessor);\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings, ...values) => new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);\n//# sourceMappingURL=lit-html.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module shady-render\n */\nimport { isTemplatePartActive } from './template.js';\nconst walkerNodeFilter = 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */;\n/**\n * Removes the list of nodes from a Template safely. In addition to removing\n * nodes from the Template, the Template part indices are updated to match\n * the mutated Template DOM.\n *\n * As the template is walked the removal state is tracked and\n * part indices are adjusted as needed.\n *\n * div\n *   div#1 (remove) <-- start removing (removing node is div#1)\n *     div\n *       div#2 (remove)  <-- continue removing (removing node is still div#1)\n *         div\n * div <-- stop removing since previous sibling is the removing node (div#1,\n * removed 4 nodes)\n */\nexport function removeNodesFromTemplate(template, nodesToRemove) {\n    const { element: { content }, parts } = template;\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = nextActiveIndexInTemplateParts(parts);\n    let part = parts[partIndex];\n    let nodeIndex = -1;\n    let removeCount = 0;\n    const nodesToRemoveInTemplate = [];\n    let currentRemovingNode = null;\n    while (walker.nextNode()) {\n        nodeIndex++;\n        const node = walker.currentNode;\n        // End removal if stepped past the removing node\n        if (node.previousSibling === currentRemovingNode) {\n            currentRemovingNode = null;\n        }\n        // A node to remove was found in the template\n        if (nodesToRemove.has(node)) {\n            nodesToRemoveInTemplate.push(node);\n            // Track node we're removing\n            if (currentRemovingNode === null) {\n                currentRemovingNode = node;\n            }\n        }\n        // When removing, increment count by which to adjust subsequent part indices\n        if (currentRemovingNode !== null) {\n            removeCount++;\n        }\n        while (part !== undefined && part.index === nodeIndex) {\n            // If part is in a removed node deactivate it by setting index to -1 or\n            // adjust the index as needed.\n            part.index = currentRemovingNode !== null ? -1 : part.index - removeCount;\n            // go to the next active part.\n            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n            part = parts[partIndex];\n        }\n    }\n    nodesToRemoveInTemplate.forEach((n) => n.parentNode.removeChild(n));\n}\nconst countNodes = (node) => {\n    let count = (node.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */) ? 0 : 1;\n    const walker = document.createTreeWalker(node, walkerNodeFilter, null, false);\n    while (walker.nextNode()) {\n        count++;\n    }\n    return count;\n};\nconst nextActiveIndexInTemplateParts = (parts, startIndex = -1) => {\n    for (let i = startIndex + 1; i < parts.length; i++) {\n        const part = parts[i];\n        if (isTemplatePartActive(part)) {\n            return i;\n        }\n    }\n    return -1;\n};\n/**\n * Inserts the given node into the Template, optionally before the given\n * refNode. In addition to inserting the node into the Template, the Template\n * part indices are updated to match the mutated Template DOM.\n */\nexport function insertNodeIntoTemplate(template, node, refNode = null) {\n    const { element: { content }, parts } = template;\n    // If there's no refNode, then put node at end of template.\n    // No part indices need to be shifted in this case.\n    if (refNode === null || refNode === undefined) {\n        content.appendChild(node);\n        return;\n    }\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = nextActiveIndexInTemplateParts(parts);\n    let insertCount = 0;\n    let walkerIndex = -1;\n    while (walker.nextNode()) {\n        walkerIndex++;\n        const walkerNode = walker.currentNode;\n        if (walkerNode === refNode) {\n            insertCount = countNodes(node);\n            refNode.parentNode.insertBefore(node, refNode);\n        }\n        while (partIndex !== -1 && parts[partIndex].index === walkerIndex) {\n            // If we've inserted the node, simply adjust all subsequent parts\n            if (insertCount > 0) {\n                while (partIndex !== -1) {\n                    parts[partIndex].index += insertCount;\n                    partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n                }\n                return;\n            }\n            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n        }\n    }\n}\n//# sourceMappingURL=modify-template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * Module to add shady DOM/shady CSS polyfill support to lit-html template\n * rendering. See the [[render]] method for details.\n *\n * @module shady-render\n * @preferred\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { removeNodes } from './dom.js';\nimport { insertNodeIntoTemplate, removeNodesFromTemplate } from './modify-template.js';\nimport { parts, render as litRender } from './render.js';\nimport { templateCaches } from './template-factory.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { TemplateResult } from './template-result.js';\nimport { marker, Template } from './template.js';\nexport { html, svg, TemplateResult } from '../lit-html.js';\n// Get a key to lookup in `templateCaches`.\nconst getTemplateCacheKey = (type, scopeName) => `${type}--${scopeName}`;\nlet compatibleShadyCSSVersion = true;\nif (typeof window.ShadyCSS === 'undefined') {\n    compatibleShadyCSSVersion = false;\n}\nelse if (typeof window.ShadyCSS.prepareTemplateDom === 'undefined') {\n    console.warn(`Incompatible ShadyCSS version detected.` +\n        `Please update to at least @webcomponents/webcomponentsjs@2.0.2 and` +\n        `@webcomponents/shadycss@1.3.1.`);\n    compatibleShadyCSSVersion = false;\n}\n/**\n * Template factory which scopes template DOM using ShadyCSS.\n * @param scopeName {string}\n */\nconst shadyTemplateFactory = (scopeName) => (result) => {\n    const cacheKey = getTemplateCacheKey(result.type, scopeName);\n    let templateCache = templateCaches.get(cacheKey);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(cacheKey, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    const key = result.strings.join(marker);\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        const element = result.getTemplateElement();\n        if (compatibleShadyCSSVersion) {\n            window.ShadyCSS.prepareTemplateDom(element, scopeName);\n        }\n        template = new Template(result, element);\n        templateCache.keyString.set(key, template);\n    }\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n};\nconst TEMPLATE_TYPES = ['html', 'svg'];\n/**\n * Removes all style elements from Templates for the given scopeName.\n */\nconst removeStylesFromLitTemplates = (scopeName) => {\n    TEMPLATE_TYPES.forEach((type) => {\n        const templates = templateCaches.get(getTemplateCacheKey(type, scopeName));\n        if (templates !== undefined) {\n            templates.keyString.forEach((template) => {\n                const { element: { content } } = template;\n                // IE 11 doesn't support the iterable param Set constructor\n                const styles = new Set();\n                Array.from(content.querySelectorAll('style')).forEach((s) => {\n                    styles.add(s);\n                });\n                removeNodesFromTemplate(template, styles);\n            });\n        }\n    });\n};\nconst shadyRenderSet = new Set();\n/**\n * For the given scope name, ensures that ShadyCSS style scoping is performed.\n * This is done just once per scope name so the fragment and template cannot\n * be modified.\n * (1) extracts styles from the rendered fragment and hands them to ShadyCSS\n * to be scoped and appended to the document\n * (2) removes style elements from all lit-html Templates for this scope name.\n *\n * Note, <style> elements can only be placed into templates for the\n * initial rendering of the scope. If <style> elements are included in templates\n * dynamically rendered to the scope (after the first scope render), they will\n * not be scoped and the <style> will be left in the template and rendered\n * output.\n */\nconst prepareTemplateStyles = (renderedDOM, template, scopeName) => {\n    shadyRenderSet.add(scopeName);\n    // Move styles out of rendered DOM and store.\n    const styles = renderedDOM.querySelectorAll('style');\n    // If there are no styles, skip unnecessary work\n    if (styles.length === 0) {\n        // Ensure prepareTemplateStyles is called to support adding\n        // styles via `prepareAdoptedCssText` since that requires that\n        // `prepareTemplateStyles` is called.\n        window.ShadyCSS.prepareTemplateStyles(template.element, scopeName);\n        return;\n    }\n    const condensedStyle = document.createElement('style');\n    // Collect styles into a single style. This helps us make sure ShadyCSS\n    // manipulations will not prevent us from being able to fix up template\n    // part indices.\n    // NOTE: collecting styles is inefficient for browsers but ShadyCSS\n    // currently does this anyway. When it does not, this should be changed.\n    for (let i = 0; i < styles.length; i++) {\n        const style = styles[i];\n        style.parentNode.removeChild(style);\n        condensedStyle.textContent += style.textContent;\n    }\n    // Remove styles from nested templates in this scope.\n    removeStylesFromLitTemplates(scopeName);\n    // And then put the condensed style into the \"root\" template passed in as\n    // `template`.\n    insertNodeIntoTemplate(template, condensedStyle, template.element.content.firstChild);\n    // Note, it's important that ShadyCSS gets the template that `lit-html`\n    // will actually render so that it can update the style inside when\n    // needed (e.g. @apply native Shadow DOM case).\n    window.ShadyCSS.prepareTemplateStyles(template.element, scopeName);\n    if (window.ShadyCSS.nativeShadow) {\n        // When in native Shadow DOM, re-add styling to rendered content using\n        // the style ShadyCSS produced.\n        const style = template.element.content.querySelector('style');\n        renderedDOM.insertBefore(style.cloneNode(true), renderedDOM.firstChild);\n    }\n    else {\n        // When not in native Shadow DOM, at this point ShadyCSS will have\n        // removed the style from the lit template and parts will be broken as a\n        // result. To fix this, we put back the style node ShadyCSS removed\n        // and then tell lit to remove that node from the template.\n        // NOTE, ShadyCSS creates its own style so we can safely add/remove\n        // `condensedStyle` here.\n        template.element.content.insertBefore(condensedStyle, template.element.content.firstChild);\n        const removes = new Set();\n        removes.add(condensedStyle);\n        removeNodesFromTemplate(template, removes);\n    }\n};\n/**\n * Extension to the standard `render` method which supports rendering\n * to ShadowRoots when the ShadyDOM (https://github.com/webcomponents/shadydom)\n * and ShadyCSS (https://github.com/webcomponents/shadycss) polyfills are used\n * or when the webcomponentsjs\n * (https://github.com/webcomponents/webcomponentsjs) polyfill is used.\n *\n * Adds a `scopeName` option which is used to scope element DOM and stylesheets\n * when native ShadowDOM is unavailable. The `scopeName` will be added to\n * the class attribute of all rendered DOM. In addition, any style elements will\n * be automatically re-written with this `scopeName` selector and moved out\n * of the rendered DOM and into the document `<head>`.\n *\n * It is common to use this render method in conjunction with a custom element\n * which renders a shadowRoot. When this is done, typically the element's\n * `localName` should be used as the `scopeName`.\n *\n * In addition to DOM scoping, ShadyCSS also supports a basic shim for css\n * custom properties (needed only on older browsers like IE11) and a shim for\n * a deprecated feature called `@apply` that supports applying a set of css\n * custom properties to a given location.\n *\n * Usage considerations:\n *\n * * Part values in `<style>` elements are only applied the first time a given\n * `scopeName` renders. Subsequent changes to parts in style elements will have\n * no effect. Because of this, parts in style elements should only be used for\n * values that will never change, for example parts that set scope-wide theme\n * values or parts which render shared style elements.\n *\n * * Note, due to a limitation of the ShadyDOM polyfill, rendering in a\n * custom element's `constructor` is not supported. Instead rendering should\n * either done asynchronously, for example at microtask timing (for example\n * `Promise.resolve()`), or be deferred until the first time the element's\n * `connectedCallback` runs.\n *\n * Usage considerations when using shimmed custom properties or `@apply`:\n *\n * * Whenever any dynamic changes are made which affect\n * css custom properties, `ShadyCSS.styleElement(element)` must be called\n * to update the element. There are two cases when this is needed:\n * (1) the element is connected to a new parent, (2) a class is added to the\n * element that causes it to match different custom properties.\n * To address the first case when rendering a custom element, `styleElement`\n * should be called in the element's `connectedCallback`.\n *\n * * Shimmed custom properties may only be defined either for an entire\n * shadowRoot (for example, in a `:host` rule) or via a rule that directly\n * matches an element with a shadowRoot. In other words, instead of flowing from\n * parent to child as do native css custom properties, shimmed custom properties\n * flow only from shadowRoots to nested shadowRoots.\n *\n * * When using `@apply` mixing css shorthand property names with\n * non-shorthand names (for example `border` and `border-width`) is not\n * supported.\n */\nexport const render = (result, container, options) => {\n    const scopeName = options.scopeName;\n    const hasRendered = parts.has(container);\n    const needsScoping = container instanceof ShadowRoot &&\n        compatibleShadyCSSVersion && result instanceof TemplateResult;\n    // Handle first render to a scope specially...\n    const firstScopeRender = needsScoping && !shadyRenderSet.has(scopeName);\n    // On first scope render, render into a fragment; this cannot be a single\n    // fragment that is reused since nested renders can occur synchronously.\n    const renderContainer = firstScopeRender ? document.createDocumentFragment() : container;\n    litRender(result, renderContainer, Object.assign({ templateFactory: shadyTemplateFactory(scopeName) }, options));\n    // When performing first scope render,\n    // (1) We've rendered into a fragment so that there's a chance to\n    // `prepareTemplateStyles` before sub-elements hit the DOM\n    // (which might cause them to render based on a common pattern of\n    // rendering in a custom element's `connectedCallback`);\n    // (2) Scope the template with ShadyCSS one time only for this scope.\n    // (3) Render the fragment into the container and make sure the\n    // container knows its `part` is the one we just rendered. This ensures\n    // DOM will be re-used on subsequent renders.\n    if (firstScopeRender) {\n        const part = parts.get(renderContainer);\n        parts.delete(renderContainer);\n        if (part.value instanceof TemplateInstance) {\n            prepareTemplateStyles(renderContainer, part.value.template, scopeName);\n        }\n        removeNodes(container, container.firstChild);\n        container.appendChild(renderContainer);\n        parts.set(container, part);\n    }\n    // After elements have hit the DOM, update styling if this is the\n    // initial render to this container.\n    // This is needed whenever dynamic changes are made so it would be\n    // safest to do every render; however, this would regress performance\n    // so we leave it up to the user to call `ShadyCSSS.styleElement`\n    // for dynamic changes.\n    if (!hasRendered && needsScoping) {\n        window.ShadyCSS.styleElement(container.host);\n    }\n};\n//# sourceMappingURL=shady-render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * When using Closure Compiler, JSCompiler_renameProperty(property, object) is\n * replaced at compile time by the munged name for object[property]. We cannot\n * alias this function, so we have to use a small shim that has the same\n * behavior when not compiling.\n */\nwindow.JSCompiler_renameProperty =\n    (prop, _obj) => prop;\nexport const defaultConverter = {\n    toAttribute(value, type) {\n        switch (type) {\n            case Boolean:\n                return value ? '' : null;\n            case Object:\n            case Array:\n                // if the value is `null` or `undefined` pass this through\n                // to allow removing/no change behavior.\n                return value == null ? value : JSON.stringify(value);\n        }\n        return value;\n    },\n    fromAttribute(value, type) {\n        switch (type) {\n            case Boolean:\n                return value !== null;\n            case Number:\n                return value === null ? null : Number(value);\n            case Object:\n            case Array:\n                return JSON.parse(value);\n        }\n        return value;\n    }\n};\n/**\n * Change function that returns true if `value` is different from `oldValue`.\n * This method is used as the default for a property's `hasChanged` function.\n */\nexport const notEqual = (value, old) => {\n    // This ensures (old==NaN, value==NaN) always returns false\n    return old !== value && (old === old || value === value);\n};\nconst defaultPropertyDeclaration = {\n    attribute: true,\n    type: String,\n    converter: defaultConverter,\n    reflect: false,\n    hasChanged: notEqual\n};\nconst microtaskPromise = Promise.resolve(true);\nconst STATE_HAS_UPDATED = 1;\nconst STATE_UPDATE_REQUESTED = 1 << 2;\nconst STATE_IS_REFLECTING_TO_ATTRIBUTE = 1 << 3;\nconst STATE_IS_REFLECTING_TO_PROPERTY = 1 << 4;\nconst STATE_HAS_CONNECTED = 1 << 5;\n/**\n * Base element class which manages element properties and attributes. When\n * properties change, the `update` method is asynchronously called. This method\n * should be supplied by subclassers to render updates as desired.\n */\nexport class UpdatingElement extends HTMLElement {\n    constructor() {\n        super();\n        this._updateState = 0;\n        this._instanceProperties = undefined;\n        this._updatePromise = microtaskPromise;\n        this._hasConnectedResolver = undefined;\n        /**\n         * Map with keys for any properties that have changed since the last\n         * update cycle with previous values.\n         */\n        this._changedProperties = new Map();\n        /**\n         * Map with keys of properties that should be reflected when updated.\n         */\n        this._reflectingProperties = undefined;\n        this.initialize();\n    }\n    /**\n     * Returns a list of attributes corresponding to the registered properties.\n     * @nocollapse\n     */\n    static get observedAttributes() {\n        // note: piggy backing on this to ensure we're finalized.\n        this.finalize();\n        const attributes = [];\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        this._classProperties.forEach((v, p) => {\n            const attr = this._attributeNameForProperty(p, v);\n            if (attr !== undefined) {\n                this._attributeToPropertyMap.set(attr, p);\n                attributes.push(attr);\n            }\n        });\n        return attributes;\n    }\n    /**\n     * Ensures the private `_classProperties` property metadata is created.\n     * In addition to `finalize` this is also called in `createProperty` to\n     * ensure the `@property` decorator can add property metadata.\n     */\n    /** @nocollapse */\n    static _ensureClassProperties() {\n        // ensure private storage for property declarations.\n        if (!this.hasOwnProperty(JSCompiler_renameProperty('_classProperties', this))) {\n            this._classProperties = new Map();\n            // NOTE: Workaround IE11 not supporting Map constructor argument.\n            const superProperties = Object.getPrototypeOf(this)._classProperties;\n            if (superProperties !== undefined) {\n                superProperties.forEach((v, k) => this._classProperties.set(k, v));\n            }\n        }\n    }\n    /**\n     * Creates a property accessor on the element prototype if one does not exist.\n     * The property setter calls the property's `hasChanged` property option\n     * or uses a strict identity check to determine whether or not to request\n     * an update.\n     * @nocollapse\n     */\n    static createProperty(name, options = defaultPropertyDeclaration) {\n        // Note, since this can be called by the `@property` decorator which\n        // is called before `finalize`, we ensure storage exists for property\n        // metadata.\n        this._ensureClassProperties();\n        this._classProperties.set(name, options);\n        // Do not generate an accessor if the prototype already has one, since\n        // it would be lost otherwise and that would never be the user's intention;\n        // Instead, we expect users to call `requestUpdate` themselves from\n        // user-defined accessors. Note that if the super has an accessor we will\n        // still overwrite it\n        if (options.noAccessor || this.prototype.hasOwnProperty(name)) {\n            return;\n        }\n        const key = typeof name === 'symbol' ? Symbol() : `__${name}`;\n        Object.defineProperty(this.prototype, name, {\n            // tslint:disable-next-line:no-any no symbol in index\n            get() {\n                // tslint:disable-next-line:no-any no symbol in index\n                return this[key];\n            },\n            set(value) {\n                // tslint:disable-next-line:no-any no symbol in index\n                const oldValue = this[name];\n                // tslint:disable-next-line:no-any no symbol in index\n                this[key] = value;\n                this.requestUpdate(name, oldValue);\n            },\n            configurable: true,\n            enumerable: true\n        });\n    }\n    /**\n     * Creates property accessors for registered properties and ensures\n     * any superclasses are also finalized.\n     * @nocollapse\n     */\n    static finalize() {\n        if (this.hasOwnProperty(JSCompiler_renameProperty('finalized', this)) &&\n            this.finalized) {\n            return;\n        }\n        // finalize any superclasses\n        const superCtor = Object.getPrototypeOf(this);\n        if (typeof superCtor.finalize === 'function') {\n            superCtor.finalize();\n        }\n        this.finalized = true;\n        this._ensureClassProperties();\n        // initialize Map populated in observedAttributes\n        this._attributeToPropertyMap = new Map();\n        // make any properties\n        // Note, only process \"own\" properties since this element will inherit\n        // any properties defined on the superClass, and finalization ensures\n        // the entire prototype chain is finalized.\n        if (this.hasOwnProperty(JSCompiler_renameProperty('properties', this))) {\n            const props = this.properties;\n            // support symbols in properties (IE11 does not support this)\n            const propKeys = [\n                ...Object.getOwnPropertyNames(props),\n                ...(typeof Object.getOwnPropertySymbols === 'function') ?\n                    Object.getOwnPropertySymbols(props) :\n                    []\n            ];\n            // This for/of is ok because propKeys is an array\n            for (const p of propKeys) {\n                // note, use of `any` is due to TypeSript lack of support for symbol in\n                // index types\n                // tslint:disable-next-line:no-any no symbol in index\n                this.createProperty(p, props[p]);\n            }\n        }\n    }\n    /**\n     * Returns the property name for the given attribute `name`.\n     * @nocollapse\n     */\n    static _attributeNameForProperty(name, options) {\n        const attribute = options.attribute;\n        return attribute === false ?\n            undefined :\n            (typeof attribute === 'string' ?\n                attribute :\n                (typeof name === 'string' ? name.toLowerCase() : undefined));\n    }\n    /**\n     * Returns true if a property should request an update.\n     * Called when a property value is set and uses the `hasChanged`\n     * option for the property if present or a strict identity check.\n     * @nocollapse\n     */\n    static _valueHasChanged(value, old, hasChanged = notEqual) {\n        return hasChanged(value, old);\n    }\n    /**\n     * Returns the property value for the given attribute value.\n     * Called via the `attributeChangedCallback` and uses the property's\n     * `converter` or `converter.fromAttribute` property option.\n     * @nocollapse\n     */\n    static _propertyValueFromAttribute(value, options) {\n        const type = options.type;\n        const converter = options.converter || defaultConverter;\n        const fromAttribute = (typeof converter === 'function' ? converter : converter.fromAttribute);\n        return fromAttribute ? fromAttribute(value, type) : value;\n    }\n    /**\n     * Returns the attribute value for the given property value. If this\n     * returns undefined, the property will *not* be reflected to an attribute.\n     * If this returns null, the attribute will be removed, otherwise the\n     * attribute will be set to the value.\n     * This uses the property's `reflect` and `type.toAttribute` property options.\n     * @nocollapse\n     */\n    static _propertyValueToAttribute(value, options) {\n        if (options.reflect === undefined) {\n            return;\n        }\n        const type = options.type;\n        const converter = options.converter;\n        const toAttribute = converter && converter.toAttribute ||\n            defaultConverter.toAttribute;\n        return toAttribute(value, type);\n    }\n    /**\n     * Performs element initialization. By default captures any pre-set values for\n     * registered properties.\n     */\n    initialize() {\n        this._saveInstanceProperties();\n    }\n    /**\n     * Fixes any properties set on the instance before upgrade time.\n     * Otherwise these would shadow the accessor and break these properties.\n     * The properties are stored in a Map which is played back after the\n     * constructor runs. Note, on very old versions of Safari (<=9) or Chrome\n     * (<=41), properties created for native platform properties like (`id` or\n     * `name`) may not have default values set in the element constructor. On\n     * these browsers native properties appear on instances and therefore their\n     * default value will overwrite any element default (e.g. if the element sets\n     * this.id = 'id' in the constructor, the 'id' will become '' since this is\n     * the native platform default).\n     */\n    _saveInstanceProperties() {\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        this.constructor\n            ._classProperties.forEach((_v, p) => {\n            if (this.hasOwnProperty(p)) {\n                const value = this[p];\n                delete this[p];\n                if (!this._instanceProperties) {\n                    this._instanceProperties = new Map();\n                }\n                this._instanceProperties.set(p, value);\n            }\n        });\n    }\n    /**\n     * Applies previously saved instance properties.\n     */\n    _applyInstanceProperties() {\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        // tslint:disable-next-line:no-any\n        this._instanceProperties.forEach((v, p) => this[p] = v);\n        this._instanceProperties = undefined;\n    }\n    connectedCallback() {\n        this._updateState = this._updateState | STATE_HAS_CONNECTED;\n        // Ensure connection triggers an update. Updates cannot complete before\n        // connection and if one is pending connection the `_hasConnectionResolver`\n        // will exist. If so, resolve it to complete the update, otherwise\n        // requestUpdate.\n        if (this._hasConnectedResolver) {\n            this._hasConnectedResolver();\n            this._hasConnectedResolver = undefined;\n        }\n        else {\n            this.requestUpdate();\n        }\n    }\n    /**\n     * Allows for `super.disconnectedCallback()` in extensions while\n     * reserving the possibility of making non-breaking feature additions\n     * when disconnecting at some point in the future.\n     */\n    disconnectedCallback() {\n    }\n    /**\n     * Synchronizes property values when attributes change.\n     */\n    attributeChangedCallback(name, old, value) {\n        if (old !== value) {\n            this._attributeToProperty(name, value);\n        }\n    }\n    _propertyToAttribute(name, value, options = defaultPropertyDeclaration) {\n        const ctor = this.constructor;\n        const attr = ctor._attributeNameForProperty(name, options);\n        if (attr !== undefined) {\n            const attrValue = ctor._propertyValueToAttribute(value, options);\n            // an undefined value does not change the attribute.\n            if (attrValue === undefined) {\n                return;\n            }\n            // Track if the property is being reflected to avoid\n            // setting the property again via `attributeChangedCallback`. Note:\n            // 1. this takes advantage of the fact that the callback is synchronous.\n            // 2. will behave incorrectly if multiple attributes are in the reaction\n            // stack at time of calling. However, since we process attributes\n            // in `update` this should not be possible (or an extreme corner case\n            // that we'd like to discover).\n            // mark state reflecting\n            this._updateState = this._updateState | STATE_IS_REFLECTING_TO_ATTRIBUTE;\n            if (attrValue == null) {\n                this.removeAttribute(attr);\n            }\n            else {\n                this.setAttribute(attr, attrValue);\n            }\n            // mark state not reflecting\n            this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_ATTRIBUTE;\n        }\n    }\n    _attributeToProperty(name, value) {\n        // Use tracking info to avoid deserializing attribute value if it was\n        // just set from a property setter.\n        if (this._updateState & STATE_IS_REFLECTING_TO_ATTRIBUTE) {\n            return;\n        }\n        const ctor = this.constructor;\n        const propName = ctor._attributeToPropertyMap.get(name);\n        if (propName !== undefined) {\n            const options = ctor._classProperties.get(propName) || defaultPropertyDeclaration;\n            // mark state reflecting\n            this._updateState = this._updateState | STATE_IS_REFLECTING_TO_PROPERTY;\n            this[propName] =\n                // tslint:disable-next-line:no-any\n                ctor._propertyValueFromAttribute(value, options);\n            // mark state not reflecting\n            this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_PROPERTY;\n        }\n    }\n    /**\n     * Requests an update which is processed asynchronously. This should\n     * be called when an element should update based on some state not triggered\n     * by setting a property. In this case, pass no arguments. It should also be\n     * called when manually implementing a property setter. In this case, pass the\n     * property `name` and `oldValue` to ensure that any configured property\n     * options are honored. Returns the `updateComplete` Promise which is resolved\n     * when the update completes.\n     *\n     * @param name {PropertyKey} (optional) name of requesting property\n     * @param oldValue {any} (optional) old value of requesting property\n     * @returns {Promise} A Promise that is resolved when the update completes.\n     */\n    requestUpdate(name, oldValue) {\n        let shouldRequestUpdate = true;\n        // if we have a property key, perform property update steps.\n        if (name !== undefined && !this._changedProperties.has(name)) {\n            const ctor = this.constructor;\n            const options = ctor._classProperties.get(name) || defaultPropertyDeclaration;\n            if (ctor._valueHasChanged(this[name], oldValue, options.hasChanged)) {\n                // track old value when changing.\n                this._changedProperties.set(name, oldValue);\n                // add to reflecting properties set\n                if (options.reflect === true &&\n                    !(this._updateState & STATE_IS_REFLECTING_TO_PROPERTY)) {\n                    if (this._reflectingProperties === undefined) {\n                        this._reflectingProperties = new Map();\n                    }\n                    this._reflectingProperties.set(name, options);\n                }\n                // abort the request if the property should not be considered changed.\n            }\n            else {\n                shouldRequestUpdate = false;\n            }\n        }\n        if (!this._hasRequestedUpdate && shouldRequestUpdate) {\n            this._enqueueUpdate();\n        }\n        return this.updateComplete;\n    }\n    /**\n     * Sets up the element to asynchronously update.\n     */\n    async _enqueueUpdate() {\n        // Mark state updating...\n        this._updateState = this._updateState | STATE_UPDATE_REQUESTED;\n        let resolve;\n        const previousUpdatePromise = this._updatePromise;\n        this._updatePromise = new Promise((res) => resolve = res);\n        // Ensure any previous update has resolved before updating.\n        // This `await` also ensures that property changes are batched.\n        await previousUpdatePromise;\n        // Make sure the element has connected before updating.\n        if (!this._hasConnected) {\n            await new Promise((res) => this._hasConnectedResolver = res);\n        }\n        // Allow `performUpdate` to be asynchronous to enable scheduling of updates.\n        const result = this.performUpdate();\n        // Note, this is to avoid delaying an additional microtask unless we need\n        // to.\n        if (result != null &&\n            typeof result.then === 'function') {\n            await result;\n        }\n        resolve(!this._hasRequestedUpdate);\n    }\n    get _hasConnected() {\n        return (this._updateState & STATE_HAS_CONNECTED);\n    }\n    get _hasRequestedUpdate() {\n        return (this._updateState & STATE_UPDATE_REQUESTED);\n    }\n    get hasUpdated() {\n        return (this._updateState & STATE_HAS_UPDATED);\n    }\n    /**\n     * Performs an element update.\n     *\n     * You can override this method to change the timing of updates. For instance,\n     * to schedule updates to occur just before the next frame:\n     *\n     * ```\n     * protected async performUpdate(): Promise<unknown> {\n     *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n     *   super.performUpdate();\n     * }\n     * ```\n     */\n    performUpdate() {\n        // Mixin instance properties once, if they exist.\n        if (this._instanceProperties) {\n            this._applyInstanceProperties();\n        }\n        if (this.shouldUpdate(this._changedProperties)) {\n            const changedProperties = this._changedProperties;\n            this.update(changedProperties);\n            this._markUpdated();\n            if (!(this._updateState & STATE_HAS_UPDATED)) {\n                this._updateState = this._updateState | STATE_HAS_UPDATED;\n                this.firstUpdated(changedProperties);\n            }\n            this.updated(changedProperties);\n        }\n        else {\n            this._markUpdated();\n        }\n    }\n    _markUpdated() {\n        this._changedProperties = new Map();\n        this._updateState = this._updateState & ~STATE_UPDATE_REQUESTED;\n    }\n    /**\n     * Returns a Promise that resolves when the element has completed updating.\n     * The Promise value is a boolean that is `true` if the element completed the\n     * update without triggering another update. The Promise result is `false` if\n     * a property was set inside `updated()`. This getter can be implemented to\n     * await additional state. For example, it is sometimes useful to await a\n     * rendered element before fulfilling this Promise. To do this, first await\n     * `super.updateComplete` then any subsequent state.\n     *\n     * @returns {Promise} The Promise returns a boolean that indicates if the\n     * update resolved without triggering another update.\n     */\n    get updateComplete() {\n        return this._updatePromise;\n    }\n    /**\n     * Controls whether or not `update` should be called when the element requests\n     * an update. By default, this method always returns `true`, but this can be\n     * customized to control when to update.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    shouldUpdate(_changedProperties) {\n        return true;\n    }\n    /**\n     * Updates the element. This method reflects property values to attributes.\n     * It can be overridden to render and keep updated element DOM.\n     * Setting properties inside this method will *not* trigger\n     * another update.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    update(_changedProperties) {\n        if (this._reflectingProperties !== undefined &&\n            this._reflectingProperties.size > 0) {\n            // Use forEach so this works even if for/of loops are compiled to for\n            // loops expecting arrays\n            this._reflectingProperties.forEach((v, k) => this._propertyToAttribute(k, this[k], v));\n            this._reflectingProperties = undefined;\n        }\n    }\n    /**\n     * Invoked whenever the element is updated. Implement to perform\n     * post-updating tasks via DOM APIs, for example, focusing an element.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    updated(_changedProperties) {\n    }\n    /**\n     * Invoked when the element is first updated. Implement to perform one time\n     * work on the element after update.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    firstUpdated(_changedProperties) {\n    }\n}\n/**\n * Marks class as having finished creating properties.\n */\nUpdatingElement.finalized = true;\n//# sourceMappingURL=updating-element.js.map","/**\n@license\nCopyright (c) 2019 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nexport const supportsAdoptingStyleSheets = ('adoptedStyleSheets' in Document.prototype) &&\n    ('replace' in CSSStyleSheet.prototype);\nconst constructionToken = Symbol();\nexport class CSSResult {\n    constructor(cssText, safeToken) {\n        if (safeToken !== constructionToken) {\n            throw new Error('CSSResult is not constructable. Use `unsafeCSS` or `css` instead.');\n        }\n        this.cssText = cssText;\n    }\n    // Note, this is a getter so that it's lazy. In practice, this means\n    // stylesheets are not created until the first element instance is made.\n    get styleSheet() {\n        if (this._styleSheet === undefined) {\n            // Note, if `adoptedStyleSheets` is supported then we assume CSSStyleSheet\n            // is constructable.\n            if (supportsAdoptingStyleSheets) {\n                this._styleSheet = new CSSStyleSheet();\n                this._styleSheet.replaceSync(this.cssText);\n            }\n            else {\n                this._styleSheet = null;\n            }\n        }\n        return this._styleSheet;\n    }\n    toString() {\n        return this.cssText;\n    }\n}\n/**\n * Wrap a value for interpolation in a css tagged template literal.\n *\n * This is unsafe because untrusted CSS text can be used to phone home\n * or exfiltrate data to an attacker controlled site. Take care to only use\n * this with trusted input.\n */\nexport const unsafeCSS = (value) => {\n    return new CSSResult(String(value), constructionToken);\n};\nconst textFromCSSResult = (value) => {\n    if (value instanceof CSSResult) {\n        return value.cssText;\n    }\n    else {\n        throw new Error(`Value passed to 'css' function must be a 'css' function result: ${value}. Use 'unsafeCSS' to pass non-literal values, but\n            take care to ensure page security.`);\n    }\n};\n/**\n * Template tag which which can be used with LitElement's `style` property to\n * set element styles. For security reasons, only literal string values may be\n * used. To incorporate non-literal values `unsafeCSS` may be used inside a\n * template string part.\n */\nexport const css = (strings, ...values) => {\n    const cssText = values.reduce((acc, v, idx) => acc + textFromCSSResult(v) + strings[idx + 1], strings[0]);\n    return new CSSResult(cssText, constructionToken);\n};\n//# sourceMappingURL=css-tag.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { TemplateResult } from 'lit-html';\nimport { render } from 'lit-html/lib/shady-render';\nimport { UpdatingElement } from './lib/updating-element.js';\nexport * from './lib/updating-element.js';\nexport * from './lib/decorators.js';\nexport { html, svg, TemplateResult, SVGTemplateResult } from 'lit-html/lit-html';\nimport { supportsAdoptingStyleSheets } from './lib/css-tag.js';\nexport * from './lib/css-tag.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for LitElement usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litElementVersions'] || (window['litElementVersions'] = []))\n    .push('2.0.1');\n/**\n * Minimal implementation of Array.prototype.flat\n * @param arr the array to flatten\n * @param result the accumlated result\n */\nfunction arrayFlat(styles, result = []) {\n    for (let i = 0, length = styles.length; i < length; i++) {\n        const value = styles[i];\n        if (Array.isArray(value)) {\n            arrayFlat(value, result);\n        }\n        else {\n            result.push(value);\n        }\n    }\n    return result;\n}\n/** Deeply flattens styles array. Uses native flat if available. */\nconst flattenStyles = (styles) => styles.flat ? styles.flat(Infinity) : arrayFlat(styles);\nexport class LitElement extends UpdatingElement {\n    /** @nocollapse */\n    static finalize() {\n        super.finalize();\n        // Prepare styling that is stamped at first render time. Styling\n        // is built from user provided `styles` or is inherited from the superclass.\n        this._styles =\n            this.hasOwnProperty(JSCompiler_renameProperty('styles', this)) ?\n                this._getUniqueStyles() :\n                this._styles || [];\n    }\n    /** @nocollapse */\n    static _getUniqueStyles() {\n        // Take care not to call `this.styles` multiple times since this generates\n        // new CSSResults each time.\n        // TODO(sorvell): Since we do not cache CSSResults by input, any\n        // shared styles will generate new stylesheet objects, which is wasteful.\n        // This should be addressed when a browser ships constructable\n        // stylesheets.\n        const userStyles = this.styles;\n        const styles = [];\n        if (Array.isArray(userStyles)) {\n            const flatStyles = flattenStyles(userStyles);\n            // As a performance optimization to avoid duplicated styling that can\n            // occur especially when composing via subclassing, de-duplicate styles\n            // preserving the last item in the list. The last item is kept to\n            // try to preserve cascade order with the assumption that it's most\n            // important that last added styles override previous styles.\n            const styleSet = flatStyles.reduceRight((set, s) => {\n                set.add(s);\n                // on IE set.add does not return the set.\n                return set;\n            }, new Set());\n            // Array.from does not work on Set in IE\n            styleSet.forEach((v) => styles.unshift(v));\n        }\n        else if (userStyles) {\n            styles.push(userStyles);\n        }\n        return styles;\n    }\n    /**\n     * Performs element initialization. By default this calls `createRenderRoot`\n     * to create the element `renderRoot` node and captures any pre-set values for\n     * registered properties.\n     */\n    initialize() {\n        super.initialize();\n        this.renderRoot = this.createRenderRoot();\n        // Note, if renderRoot is not a shadowRoot, styles would/could apply to the\n        // element's getRootNode(). While this could be done, we're choosing not to\n        // support this now since it would require different logic around de-duping.\n        if (window.ShadowRoot && this.renderRoot instanceof window.ShadowRoot) {\n            this.adoptStyles();\n        }\n    }\n    /**\n     * Returns the node into which the element should render and by default\n     * creates and returns an open shadowRoot. Implement to customize where the\n     * element's DOM is rendered. For example, to render into the element's\n     * childNodes, return `this`.\n     * @returns {Element|DocumentFragment} Returns a node into which to render.\n     */\n    createRenderRoot() {\n        return this.attachShadow({ mode: 'open' });\n    }\n    /**\n     * Applies styling to the element shadowRoot using the `static get styles`\n     * property. Styling will apply using `shadowRoot.adoptedStyleSheets` where\n     * available and will fallback otherwise. When Shadow DOM is polyfilled,\n     * ShadyCSS scopes styles and adds them to the document. When Shadow DOM\n     * is available but `adoptedStyleSheets` is not, styles are appended to the\n     * end of the `shadowRoot` to [mimic spec\n     * behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).\n     */\n    adoptStyles() {\n        const styles = this.constructor._styles;\n        if (styles.length === 0) {\n            return;\n        }\n        // There are three separate cases here based on Shadow DOM support.\n        // (1) shadowRoot polyfilled: use ShadyCSS\n        // (2) shadowRoot.adoptedStyleSheets available: use it.\n        // (3) shadowRoot.adoptedStyleSheets polyfilled: append styles after\n        // rendering\n        if (window.ShadyCSS !== undefined && !window.ShadyCSS.nativeShadow) {\n            window.ShadyCSS.ScopingShim.prepareAdoptedCssText(styles.map((s) => s.cssText), this.localName);\n        }\n        else if (supportsAdoptingStyleSheets) {\n            this.renderRoot.adoptedStyleSheets =\n                styles.map((s) => s.styleSheet);\n        }\n        else {\n            // This must be done after rendering so the actual style insertion is done\n            // in `update`.\n            this._needsShimAdoptedStyleSheets = true;\n        }\n    }\n    connectedCallback() {\n        super.connectedCallback();\n        // Note, first update/render handles styleElement so we only call this if\n        // connected after first update.\n        if (this.hasUpdated && window.ShadyCSS !== undefined) {\n            window.ShadyCSS.styleElement(this);\n        }\n    }\n    /**\n     * Updates the element. This method reflects property values to attributes\n     * and calls `render` to render DOM via lit-html. Setting properties inside\n     * this method will *not* trigger another update.\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    update(changedProperties) {\n        super.update(changedProperties);\n        const templateResult = this.render();\n        if (templateResult instanceof TemplateResult) {\n            this.constructor\n                .render(templateResult, this.renderRoot, { scopeName: this.localName, eventContext: this });\n        }\n        // When native Shadow DOM is used but adoptedStyles are not supported,\n        // insert styling after rendering to ensure adoptedStyles have highest\n        // priority.\n        if (this._needsShimAdoptedStyleSheets) {\n            this._needsShimAdoptedStyleSheets = false;\n            this.constructor._styles.forEach((s) => {\n                const style = document.createElement('style');\n                style.textContent = s.cssText;\n                this.renderRoot.appendChild(style);\n            });\n        }\n    }\n    /**\n     * Invoked on each update to perform rendering tasks. This method must return\n     * a lit-html TemplateResult. Setting properties inside this method will *not*\n     * trigger the element to update.\n     */\n    render() {\n    }\n}\n/**\n * Ensure this class is marked as `finalized` as an optimization ensuring\n * it will not needlessly try to `finalize`.\n */\nLitElement.finalized = true;\n/**\n * Render method used to render the lit-html TemplateResult to the element's\n * DOM.\n * @param {TemplateResult} Template to render.\n * @param {Element|DocumentFragment} Node into which to render.\n * @param {String} Element name.\n * @nocollapse\n */\nLitElement.render = render;\n//# sourceMappingURL=lit-element.js.map","/**\n@license\nCopyright (c) 2018 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\nimport { LitElement } from 'lit-element';\n\nexport class PageViewElement extends LitElement {\n  // Only render this page if it's actually visible.\n  shouldUpdate() {\n    return this.active;\n  }\n\n  static get properties() {\n    return {\n      active: {\n        type: Boolean\n      }\n    }\n  }\n}\n","import { css } from 'lit-element';\n\nexport const SharedStyles = css `\n\n/* All screens smaller than 460px wide */\n\n  :host {\n    display:none;\n  }\n\n  /* Box model */\n  *,\n  *:after,\n  *:before {\n    -webkit-box-sizing: border-box;\n    -moz-box-sizing: border-box;\n    box-sizing: border-box;\n  }\n\n  /* Base Styles */\n\n  figure.img-right {\n      float:none;\n      margin: auto auto;\n  }\n  figure.img-right img {\n      float:none;\n      margin: auto auto;\n      max-width: 80%;\n  }\n\n  h1, h2, h3, h4, h5, h6 {\n    color: var(--app-dark-text-color); \n  }\n\n  h1, h2, h3, h4, h5, h6, p {\n    margin: 0 0 10px 0; }\n\n  h1, h2, h3, h4, h5, h6, a {\n    text-rendering: optimizeLegibility; }\n\n  h1.paper-font-display2 {\n    font-size: 42px;\n    line-height: 44px;\n    padding-right: 0px; \n    letter-spacing: .5px;\n  }\n\n  h2.paper-font-title {\n    font-size: 22px;\n    white-space: normal;\n    padding-right: 0px; }\n\n  h3 {\n    font-size: 24px;\n    font-weight: 400;\n    letter-spacing: -.012em;\n    line-height: 31px; \n    text-align: center;\n    padding: 0 14px 0 14px;\n  }\n\n  h4 {\n    font-size: 16px;\n    font-weight: 400;\n    line-height: 24px; }\n\n  h5, h6 {\n    font-size: 14px;\n    font-weight: 400;\n    line-height: 24px; }\n\n  p {\n    line-height: 28px;\n    margin: 0 0 16px 0;\n  }\n\n  ol {\n    margin-left: 14px;\n  }\n  ul{\n    margin-left: 0px;\n    padding-left: 24px;\n  }\n\n  li ul, li ol {\n    margin-left: 0px;\n  }\n\n  ol li, ul li {\n    font: 400 16px/24px Roboto, Sans-serif;\n    line-height: 28px;\n  }\n\n  strong {\n    font-weight:500;\n  }\n\n  a { \n    background-color: transparent;\n    color: var(--app-primary-color);\n    text-decoration: none; \n    font-weight: 400;\n    margin-bottom: 5px;\n    border-bottom: 2px solid var(--app-primary-color);\n    will-change: background-color\n  }\n\n  a:hover {\n    outline: 0; \n    border-bottom: 0px;\n  }\n\n\n  article, aside, details, figcaption, figure, footer, header, hgroup, main, menu, nav, section, summary, img {\n    display: block; }\n\n  .entry .entry-content .wp-block-image {\n    max-width: 100%;\n  }\n\n  section {\n    margin: 0; }\n\n  th {\n    font-weight:500;\n  }\n\n  img {\n    height: auto;\n    /* Make sure images are scaled correctly. */\n    max-width: 100%;\n    /* Adhere to container width. */\n    width: 100%\n  }\n\n  .fade-in {\n    opacity: 0;\n    animation: fadeIn 0.5s forwards;\n  }\n  .delayed-fade-in {\n    opacity: 0;\n    animation: fadeIn 1.4s forwards;\n  }\n  @keyframes fadeIn {\n    0% {\n      opacity: 0;\n      transform: translateY(50px);\n    }\n    30% {\n      opacity: 0;\n    }\n    100% {\n      opacity: 1;\n      transform: translateY(0);\n    }\n  }\n\n  /* Base Classes */\n\n  .nav {\n    display: inline; }\n\n  .sticky {\n    display: none; } \n\n  .hero>div {\n    padding: 20px 24px 30px 24px;\n    text-align: center; }\n\n  .hero-section p {\n    margin: 0 0 25px 0;\n    font-size: 18px;\n    font-weight: 300;\n    line-height: 26px; }\n\n  .text-uppercase {\n    border-top: 1px solid var(--border-grey);\n    display: block;\n    text-align: left; }\n\n  .entry-content .alignfull {\n    margin-left  : calc( -100vw / 2 + 100% / 2 );\n    margin-right : calc( -100vw / 2 + 100% / 2 );\n    max-width    : 100vw;\n  }\n\n  .entry-content .alignwide {\n    margin-left  : -100px;\n    margin-right : -100px;\n    max-width    : 1024px;\n  }\n\n  /* Classes - Section Layout */\n\n  .background-servers {\n    background: linear-gradient(#253238, #3A464B);\n    background-color: #253238;\n    background-position: fixed;\n    color: var(--app-light-text-color); }\n\n  .ts-max-width-standard {\n    box-sizing: border-box;\n    margin-left: auto;\n    margin-right: auto;\n    max-width: 1024px; }\n\n  .ts-full-bleed-section, #ts-social-footer.ts-full-bleed-section, .ts-max-width-standard {\n    margin-left: -10000px;\n    margin-right: -10000px;\n    padding-left: 10000px;\n    padding-right: 10000px; }\n\n  .background-grey {\n    background: var(--app-section-even-color);\n  }\n\n  .ts-pad-bottom-12 {\n    padding-bottom: 96px; }\n\n  .ts-pad-top-6 {\n    padding-top: 3px; }\n\n  .ts-content-body {\n    padding: 0px 34px 0 34px; }\n\n  /* CSS Grid - No, we're not using Flexbox this tume */\n  /* Simple 1/3 - 2/3 two colum grid justified */\n\n  .ts-header-wrapper {\n    display: flex;\n    flex-direction: column;\n    padding: 0 24px 6px 24px; \n    border-bottom: 1px solid var(--border-grey);\n  }\n\n  .ts-header-wrapper h1, .ts-header-wrapper h2 {\n    padding-bottom: 10px;\n  }\n\n  .ts-content-wrapper {\n    min-height: 100vh;\n    background: var(--app-main-background-color);\n    display: flex;\n    flex-direction: column;\n    padding: 0 15px 0 15px; }\n\n  .content {\n    flex: 1;\n    display: flex;\n    flex-wrap: wrap; }\n\n  .main {\n    flex: 1;\n  }\n\n  .sidebar a, .sidebar a:hover {\n    border-bottom: none;\n    font-weight: normal;\n  }\n\n  .sidebar-selected {\n    background: var(--app-nav-background);\n    color: var(--app-primary-color);\n    text-decoration:none; \n    border-bottom: none; }\n\n  .ts-content-grid-box {\n    min-height: 230px; \n    text-align: center; }\n\n  .ts-content-grid-box p, .ts-content-grid-box ul {\n    max-width: 525px; \n    text-align: left; }\n    \n  .ts-grid-wrapper-standard {\n    margin: 0px; }\n\n  .inner {\n    text-align: center;\n    color: var(--app-secondary-color);\n    background-color: var(--app-light-text-color);\n    padding: 24px 28px 0; }\n\n  .inner a {\n    font-size: 0.9rem;\n  }\n\n  .inner h3 {\n    margin: 5px 0;\n  }\n\n  .inner p{\n    text-align: center; \n    font-size: 14px;\n  }\n\n  .ts-grid-wrapper-auto-fill {\n    display: grid;\n    grid-gap: 10px;\n    grid-template-columns: repeat(auto-fill, minmax(283px, 1fr));\n    justify-items: center;\n    margin: 20px; }\n\n  .ts-grid-wrapper-auto-fit {\n    display: grid;\n    grid-gap: 10px;\n    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n    justify-items: center; }\n\n  .l-space-bottom-5 {\n    margin-bottom: 40px; }\n\n  ul.right-side-nav {\n    list-style: none;\n    padding-left: 10px; }\n\n  .nav li {\n    border-bottom: 1px solid var(--border-grey);\n    margin: 0;\n    padding: 0; }\n\n  li, li p {\n    margin: 8px 0;\n    padding: 0; \n    font-size: 1rem; }\n\n  ul.body-checks {\n    list-style: none;\n    margin-left: 0px;\n    padding: 0 4px 0 4px; \n  }\n\n  ul.body-checks li {\n    background-image: url('https://cdn1-themesurgesonslt.netdna-ssl.com/images/icons/ts-check-purple.svg');\n    background-repeat: no-repeat;\n    line-height: 24px;\n    padding: 5px 0 0 36px;\n    background-size: 22px 16px;\n    background-position: 0px 8px; }\n\n  .nav li h3 {\n    font-size: 1.15rem;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    margin: 20px 0 16px;\n    padding-bottom: 0; }\n\n  .nav li a {\n    color: var(--app-secondary-color);\n    display: block;\n    font-size: 0.95rem;\n    line-height: 40px;\n    margin: 0;\n    overflow: hidden;\n    padding: 0 16px;\n    text-align: left;\n    text-overflow: ellipsis;\n    white-space: nowrap; }\n\n  .nav li a:hover{\n    background: var(--app-section-even-color);\n    color: var(--app-primary-color);\n    text-decoration: none; }\n\n  .l-pad-right-2 {\n    padding-right: 16px; }\n\n  .l-pad-left-2 {\n    padding-left: 16px; }\n\n  .text-uppercase {\n    text-transform: uppercase;\n    border-top: 0px; }\n\n  /* Classes - Custom Card Styles */\n\n  .flex-hover-card {\n    box-sizing: border-box;\n    margin-right: 20px;\n    background: var(--app-main-background-color);\n    border-radius: 2px;\n    -ms-flex: 1;\n    flex: 1;\n    letter-spacing: .01em;\n    transition: all .3s;\n    margin-bottom: 16px; }\n\n  .flex-hover-card {\n    box-shadow: none;\n    margin: 5px 10px;\n    padding: 0;\n    width: 100%; \n    text-align: left; }\n\n  .flex-hover-card:hover {\n    transform: translate3d(0, -2px, 0);\n    text-decoration: none; }\n\n  .flex-hover-card:hover {\n    box-shadow: -1px 5px 25px -5px rgba(0, 0, 0, 0.8); }\n\n  .flex-hover-card .inner>h3 {\n    font-size: 22px;\n    margin: 0px 0px 10px 0px; }\n\n  .flex-hover-card .inner>p {\n    padding-top: 14px;\n    margin: 0px; \n    font-size: 14px;\n  }\n\n  .ts-pad-left-30 {\n    padding-left: 240px; }\n\n  .ts-pad-right-38 {\n    padding-right: 304px; }\n\n  .ts-showcase-content {\n    margin: 0 8px; }\n\n  .text-uppercase {\n    text-transform: uppercase;\n  }\n\n\n\n  /* All screens larger than 460px */\n\n  @media (min-width: 460px) {\n    header {\n      background-color: var(--app-light-text-color);\n    }\n\n    figure.img-right {\n      float:right;\n      margin-right: 60px;\n    }\n\n    figure.img-right img {\n      max-width: 100%;\n    }\n\n    h3 {\n      text-align: left;\n      font-size: 20px;\n      font-weight: 400;\n      letter-spacing: .15px;\n      padding: 0;\n    }\n\n    h1.paper-font-display2 {\n      font-size: 42px;\n      line-height: 44px;\n      padding-right: 120px;\n      margin-left: -3px; \n    }\n\n    h2.mdc-typography--headline3 {\n      font-size: 16px;\n      white-space: normal;\n      padding-right: 120px; }\n\n    ul.body-checks {\n      padding: 0 5px; \n    }\n\n    .center {\n      text-align: left !important;\n    }\n\n    .sticky {\n      display:block;\n      width: 228px;\n      max-width: 293px;\n      padding-top: 0px; }\n\n    .hero>div {\n      min-height: 180px;\n      padding: 50px 62px 46px 62px;\n      text-align: left; \n      border-bottom: 1px solid var(--border-grey);\n    }\n\n    .ts-pad-top-6 {\n      padding-top: 5px; }\n\n    .ts-content-wrapper {\n      min-height: 100vh;\n      background: var(--app-main-background-color);\n      padding: 0 62px 0 62px;\n      display: flex;\n      flex-direction: column;\n    }\n\n    .ts-grid-wrapper-standard {\n      margin: auto auto;\n      max-width: 1024px; }\n    \n    .ts-grid-wrapper-auto-fit {\n      grid-gap: 16px;\n      padding: 0px; }\n\n    .flex-hover-card {\n      width: 300px;\n      text-align: left; }\n\n    .inner {\n      text-align: left;\n      margin-right: 0px; }\n\n    .flex-hover-card .inner>h3 {\n      margin: 0;\n    }\n\n    .inner p{\n      text-align: left; \n      font-size: 14px;\n    }\n\n    .text-uppercase {\n      font-size:0.9rem;\n      text-transform: uppercase;\n      text-align: left; \n    }\n\n    .ts-grid-wrapper-autofill, .ts-grid-wrapper-standard {\n      padding: 10px; }\n\n    .flex-hover-card {\n      margin-bottom: 5px; }\n\n    .ts-grid-wrapper-auto-fill {\n      padding: 0px; }\n\n    .ts-content-grid-box {\n      text-align: left; }\n\n    .ts-left {\n      float: none;\n      margin: 0;\n      text-align: center;\n    }\n    .ts-right {\n      float: right;\n      margin: 24px 30px 5px; }\n\n    .columns {\n      display: flex;\n      flex-wrap: wrap;\n      flex: 1; }  \n  }\n`;"],"names":["directives","WeakMap","directive","f","args","d","set","isDirective","o","has","isCEPolyfill","undefined","window","customElements","polyfillWrapFlushCallback","reparentNodes","container","start","end","before","node","n","nextSibling","insertBefore","removeNodes","startNode","endNode","removeChild","noChange","nothing","marker","String","Math","random","slice","nodeMarker","markerRegex","RegExp","boundAttributeSuffix","Template","[object Object]","result","element","this","parts","index","partIndex","nodesToRemove","_prepareTemplate","template","content","walker","document","createTreeWalker","lastPartIndex","nextNode","currentNode","nodeType","hasAttributes","attributes","count","i","length","value","indexOf","stringForPart","strings","name","lastAttributeNameRegex","exec","attributeLookupName","toLowerCase","getAttribute","split","push","type","removeAttribute","tagName","data","parent","parentNode","lastIndex","createMarker","createTextNode","previousSibling","isTemplatePartActive","part","createComment","TemplateInstance","processor","options","_parts","values","setValue","commit","fragment","cloneNode","importNode","nodeIndex","_prepareInstance","handleTextExpression","insertAfterNode","handleAttributeExpressions","nodeName","adoptNode","upgrade","TemplateResult","endIndex","html","s","match","substr","createElement","innerHTML","getHTML","isPrimitive","AttributeCommitter","dirty","_createPart","AttributePart","l","text","v","Array","isArray","Symbol","iterator","t","setAttribute","_getValue","comitter","committer","NodePart","_pendingValue","appendChild","ref","_insert","_commitText","_commitTemplateResult","Node","_commitNode","_commitIterable","clear","templateFactory","update","instance","_clone","itemParts","itemPart","item","appendIntoPart","insertAfterPart","BooleanAttributePart","Error","PropertyCommitter","super","single","PropertyPart","eventOptionsSupported","capture","addEventListener","removeEventListener","_e","EventPart","eventName","eventContext","_boundHandleEvent","e","handleEvent","newListener","oldListener","shouldRemoveListener","once","passive","shouldAddListener","_options","getOptions","event","call","defaultTemplateProcessor","prefix","templateCache","templateCaches","get","stringsArray","keyString","Map","key","join","getTemplateElement","walkerNodeFilter","removeNodesFromTemplate","nextActiveIndexInTemplateParts","removeCount","nodesToRemoveInTemplate","currentRemovingNode","forEach","countNodes","startIndex","getTemplateCacheKey","scopeName","compatibleShadyCSSVersion","ShadyCSS","prepareTemplateDom","console","warn","shadyTemplateFactory","cacheKey","TEMPLATE_TYPES","shadyRenderSet","Set","prepareTemplateStyles","renderedDOM","add","styles","querySelectorAll","condensedStyle","style","textContent","templates","from","removeStylesFromLitTemplates","refNode","insertCount","walkerIndex","insertNodeIntoTemplate","firstChild","nativeShadow","querySelector","removes","JSCompiler_renameProperty","prop","_obj","defaultConverter","Boolean","Object","JSON","stringify","Number","parse","notEqual","old","defaultPropertyDeclaration","attribute","converter","reflect","hasChanged","microtaskPromise","Promise","resolve","STATE_HAS_UPDATED","STATE_UPDATE_REQUESTED","STATE_IS_REFLECTING_TO_ATTRIBUTE","STATE_IS_REFLECTING_TO_PROPERTY","STATE_HAS_CONNECTED","UpdatingElement","HTMLElement","_updateState","_instanceProperties","_updatePromise","_hasConnectedResolver","_changedProperties","_reflectingProperties","initialize","observedAttributes","finalize","_classProperties","p","attr","_attributeNameForProperty","_attributeToPropertyMap","hasOwnProperty","superProperties","getPrototypeOf","k","_ensureClassProperties","noAccessor","prototype","defineProperty","oldValue","requestUpdate","configurable","enumerable","finalized","superCtor","props","properties","propKeys","getOwnPropertyNames","getOwnPropertySymbols","createProperty","fromAttribute","toAttribute","_saveInstanceProperties","constructor","_v","_attributeToProperty","ctor","attrValue","_propertyValueToAttribute","propName","_propertyValueFromAttribute","shouldRequestUpdate","_valueHasChanged","_hasRequestedUpdate","_enqueueUpdate","updateComplete","previousUpdatePromise","res","_hasConnected","performUpdate","then","hasUpdated","_applyInstanceProperties","shouldUpdate","changedProperties","_markUpdated","firstUpdated","updated","size","_propertyToAttribute","supportsAdoptingStyleSheets","Document","CSSStyleSheet","constructionToken","CSSResult","cssText","safeToken","styleSheet","_styleSheet","replaceSync","unsafeCSS","css","reduce","acc","idx","textFromCSSResult","flattenStyles","flat","Infinity","arrayFlat","LitElement","_styles","_getUniqueStyles","userStyles","reduceRight","unshift","renderRoot","createRenderRoot","ShadowRoot","adoptStyles","attachShadow","mode","adoptedStyleSheets","map","_needsShimAdoptedStyleSheets","ScopingShim","prepareAdoptedCssText","localName","connectedCallback","styleElement","templateResult","render","hasRendered","needsScoping","firstScopeRender","renderContainer","createDocumentFragment","assign","appendInto","litRender","delete","host","PageViewElement","active","SharedStyles"],"mappings":"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"}